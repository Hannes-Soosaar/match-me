
FE- Display of all user interest.

Get to show all profiles 
- TODO: use the matches as base for showing all profile

Get to show all matches
- FE for matches is ready
- TODO: backend for matches

Design Dashboard
- The data is connected and accesible for the user information.

Start work on websockets

Start a photo server. TODO: store photos in the public folder so it can be accessed via standard ENV option. - Done - the dir variable in pictureHandlers.go and the fileDirectory variable in routes.go dictate where pictures are stored and which folder is the public folder.

    - Matches pages has all matches


Check what time does a JWT token hold.

-Dashboard

    - User Profile 
    - Matches (nt. best 5 ?) Connect, Maybe next time
    - Friends online recent logins (rnd 5?) 

- Chat 

- Matches


Kood/JÃµhvi

A profile picture can be set.

The user can log out.

The user has a minimum of 5 biographical points to configure.

It is possible to register with a username and password.

The application works with a single user.

It refuses to recommend an obviously poor match.

Create two users in an empty system with obviously poor matching characteristics. Check to make sure that they are not recommended.

It recommends obviously good matches.

Create two users in an empty system, who appear like they should obviously match

The user is not shown any recommendations until they have completed their profile.

The user can change their biographical data.

The user can specify preference which target biographical data points.

The profile picture can be removed or changed.

The email address is not shown, except to the owner of the profile.

The email address is not returned in API calls for other users

The user can specify a location from a list

The user only sees recommendations from their location.

The user can see a list of no more than 10 recommendations at a time.

The recommendations are prioritized with the best first.

The recommendations behave in line with the student's described matching logic.

It is possible to dismiss a recommendation.

That recommendation is not shown again after it is dismissed.

Connection requests can be sent.

Incoming connection requests can be rejected.

It is possible to disconnect with a user.

Chats are ordered with the most recently active chat first.

Both users see the same chat history.

The chat history API data is paginated.

The realtime implementation does not rely on polling.

The profile endpoint returns "about me" type information.

The me endpoints correctly shortcuts to the appropriate users endpoint.

The application is secure. Information is appropriately shown to the correct authenticated users only.

A method was provided to load fictitious users into the system (minimum 100).

Incoming connection requests can be accepted.

Users can only see profile information when properly allowed.

They are recommended
There is an outstanding connection request
They are connected
A PostgreSQL database is used as the primary application database.

Chat is only possible between connected profiles.

The chat works in real time.

The users endpoint returns a name and profile link.

Chat messages feature a date and time.

An unread message icon appears when new chat messages are received in real time.

The connections endpoint only returns a list of ids.

A chat history can be reached from the connected user's profile.

The recommendations endpoint only returns a list of ids.

The bio endpoint returns biographical data.

All user responses return an id in the payload.

The users endpoints return HTTP404 when the id is not found.

This includes when the user is not allowed to see a profile. This is not quite how HTTP404 is described, but it means that a bad actor cannot distinguish between "does not exist", and "has blocked the user".

The backend is implemented in Go.

The frontend is implemented in React.

The application is responsive for mobile and desktop browsers.

Extra
The user experience is excellent, usable and well designed.

An offline/online indicator is shown on profile and chat views.

A typing in progress indicator is shown.

The recommendation algorithm is exceptional.

It implements proximity-based location filtering.